<Project>

	<UsingTask TaskName="LLVM.Build.Tasks.CompileTask" AssemblyFile="$(LLVMTasksPath)LLVM.Build.Tasks.dll" />
	<UsingTask TaskName="LLVM.Build.Tasks.LinkTask" AssemblyFile="$(LLVMTasksPath)LLVM.Build.Tasks.dll" />
	<UsingTask TaskName="LLVM.Build.Tasks.ArchiveTask" AssemblyFile="$(LLVMTasksPath)LLVM.Build.Tasks.dll" />

	<Target Name="Compile">
		<ItemGroup>
			<Compile Include="@(ClangCompile)">
				<!--TODO: Make object file extension a variable.-->
				<ObjectFileName>$(IntDir)%(FileName).o</ObjectFileName>
			</Compile>
		</ItemGroup>

		<CompileTask
				ToolDir        ="$(LLVMToolsDir)"
				InputFiles     ="@(Compile)"
				IntDir         ="$(IntDir)"
				ObjectFileName ="%(Compile.ObjectFileName)"

				Stage          ="%(Compile.Stage)"
				SystemRoot     ="%(Compile.SystemRoot)"
				Language       ="%(Compile.Language)"
				StandardLibrary="%(Compile.StandardLibrary)"
				Verbose        ="%(Compile.Verbose)"

				LanguageStandard="%(Compile.LanguageStandard)"

				PositionIndependentCode ="%(Compile.PositionIndependentCode)"

				ObjectFiles="@(Compile->'%(ObjectFileName)')"

				Fake      ="$(Fake)">
			<Output
					TaskParameter="ObjectFiles"
					ItemName     ="CompileTaskOutput" />
		</CompileTask>
	</Target>

	<Target Name="Lib" DependsOnTargets="Compile">
		<ItemGroup>
			<Lib Include="@(CompileTaskOutput)" />
		</ItemGroup>

		<ArchiveTask
				ToolDir               ="$(LLVMToolsDir)"
				InputFiles            ="@(Lib)"
				OutputFile            ="%(Lib.OutputFile)"

				Fake             ="$(Fake)"
		/>
	</Target>

	<!--TODO: This is 'executable-only'-->
	<Target Name="Link">
		<ItemGroup>
			<Link Include="@(CompileTaskOutput)" />
		</ItemGroup>

		<LinkTask
				ToolDir               ="$(LLVMToolsDir)"
				InputFiles            ="@(Link)"
				OutDir                ="$(OutDir)"

				LinkerOptionExtensions="%(Link.LinkerOptionExtensions)"
				HashStyle             ="%(Link.HashStyle)"
				EhFrameHeader         ="%(Link.EhFrameHeader)"
				TargetEmulation       ="%(Link.TargetEmulation)"
				Shared                ="%(Link.Shared)"
				DynamicLinker         ="%(Link.DynamicLinker)"
				HeaderInputs          ="%(Link.HeaderInputs)"
				LibrarySearchPath     ="%(Link.LibrarySearchPath)"
				LibraryNames          ="%(Link.LibraryNames)"
				FooterInputs          ="%(Link.FooterInputs)"
				OutputFile            ="%(Link.OutputFile)"

				Fake             ="$(Fake)"
		/>
	</Target>

	<!--TODO: Dummy transition task. Remove.-->
	<UsingTask TaskName="LLVM.Build.Tasks.TonTask" AssemblyFile="$(LLVMTasksPath)LLVM.Build.Tasks.dll" />
	<Target Name="Ton">
		<TonTask
			ToolDir        ="$(LLVMToolsDir)"
			InputFiles     ="@(Compile)"
			IntDir         ="$(IntDir)"
			ObjectFileName ="%(Compile.ObjectFileName)"

			Stage          ="%(Compile.Stage)"
			SystemRoot     ="%(Compile.SystemRoot)"
			Language       ="%(Compile.Language)"
			StandardLibrary="%(Compile.StandardLibrary)"
			Verbose        ="%(Compile.Verbose)"

			LanguageStandard="%(Compile.LanguageStandard)"

			PositionIndependentCode ="%(Compile.PositionIndependentCode)"

			ObjectFiles="@(Compile->'%(ObjectFileName)')"

			Fake      ="$(Fake)">
			<Output
					TaskParameter="ObjectFiles"
					ItemName     ="CompileTaskOutput" />
		</TonTask>
	</Target>

	<Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
		<!--TODO: Print this message BEFORE 'DependsOn'.-->
		<Message Text="Executing [Build] target..." />
	</Target>

</Project>